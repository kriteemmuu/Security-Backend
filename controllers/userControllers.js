const User = require("../models/userModel");
const path = require("path");
const fs = require("fs");
const sendEmail = require("../utils/emailService");
const { generateOTPCode } = require("../utils/generateOTP");
const { sendOTP } = require("../utils/sendOTP");

// Register User
const createUser = async (req, res) => {
  try {
    const { firstName, lastName, email, password, phone } = req.body;

    if (!firstName || !lastName || !email || !password || !phone) {
      return res
        .status(400)
        .json({ success: false, message: "All fields are required!" });
    }

    const phoneNumber = Number(phone);
    if (
      !Number.isInteger(phoneNumber) ||
      phoneNumber < 1000000000 ||
      phoneNumber > 9999999999
    ) {
      return res.status(400).json({
        success: false,
        message: "Please enter a valid 10-digit phone number!",
      });
    }

    const exist = await User.findOne({ email });
    if (exist) {
      return res.status(400).json({
        success: false,
        message: "User already exists with this email!",
      });
    }

    const OTP = generateOTPCode();

    const user = await User.create({
      firstName,
      lastName,
      email,
      password,
      phone,
      otp: OTP,
      otp_expiry: new Date(Date.now() + 10 * 60 * 1000),
    });

    const userData = {
      _id: user._id,
      otp_expiry: user.otp_expiry,
      createdAt: user.createdAt,
    };

    try {
      await sendEmail({
        email: user.email,
        subject: "Verification Code",
        message: `Dear ${user.firstName},\n\nOTP request action is triggered for your account.\n\nUse OTP code is: ${OTP}.\n\nDo not share your OTP with anyone.\n\nIf you face any difficulty during the registration process, do get in touch with our Support team.\n\nThis email was auto-generated by Supported Marketplace. Please do not reply to this mail.\n\nRegards,\n Supported Team`,
      });

      res.status(201).json({
        success: true,
        message: "OTP sent to email, verify account",
        data: userData,
      });
    } catch (error) {
      console.error("Email sending error:", error);
      return res.status(500).json({
        success: false,
        message: "Internal Server Error!",
      });
    }
  } catch (error) {
    return res.status(500).json({
      success: false,
      message: error.message,
    });
  }
};

//verifyOTP
const verifyAccount = async (req, res, next) => {
  try {
    const otp = Number(req.body.otp);
    const userId = req.body.userId;
    if (!otp) {
      return res.status(400).json({
        success: false,
        message: "OTP is required!",
      });
    }

    const user = await User.findOne({ id: userId });
    if (!user) {
      return res.status(404).json({
        success: false,
        message: "User not found!",
      });
    }

    if (
      !user.otp ||
      !user.otp_expiry ||
      new Date(user.otp_expiry) < new Date()
    ) {
      return res.status(400).json({
        success: false,
        message: "OTP expired, request a new one!",
      });
    }
    if (user.otp !== otp) {
      return res.status(400).json({
        success: false,
        message: "Invalid OTP!",
      });
    }

    user.verified = true;
    user.otp = null;
    user.otp_expiry = null;
    await user.save();

    res.status(200).json({
      success: true,
      message: "Account verified successfully!",
      data: user,
    });
  } catch (error) {
    return res.status(500).json({
      success: false,
      message: "Internal Server Error!",
    });
  }
};

//resendOTP
const resendOTP = async (req, res, next) => {
  try {
    const { userId } = req.body;

    if (!userId) {
      return res.status(400).json({
        success: false,
        message: "User ID is required!",
      });
    }

    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({
        success: false,
        message: "User not found!",
      });
    }

    if (user.verified) {
      return res.status(400).json({
        success: false,
        message: "User is already verified!",
      });
    }

    // Ensure sendOTP does not fail silently
    const otpSent = await sendOTP(user);

    return res.status(200).json({
      success: true,
      message: "OTP sent successfully! Please check your email.",
      data: { _id: user.id },
    });
  } catch (error) {
    console.error("Error in resendOTP:", error);
    return res.status(500).json({
      success: false,
      message: "Internal Server Error!",
    });
  }
};

// Login credentials
const loginCredentials = async (req, res) => {
  const { email, password } = req.body;

  if (!email || !password) {
    return res
      .status(400)
      .json({ success: false, message: "Please enter email and password!" });
  }

  const user = await User.findOne({ email }).select("+password");

  if (!user) {
    return res
      .status(404)
      .json({ success: false, message: "User doesn't exist!" });
  }

  // Check if the user is locked
  if (user.lockUntil && user.lockUntil > Date.now()) {
    return res.status(403).json({
      success: false,
      message:
        "Account locked due to multiple failed login attempts. Try again after 24 hours.",
    });
  }

  // Verify email if needed
  if (!user.verified) {
    try {
      await sendOTP(user);
      return res
        .status(201)
        .json({ success: true, message: "OTP sent to email, verify account" });
    } catch (error) {
      return res
        .status(500)
        .json({ success: false, message: "Internal Server Error!" });
    }
  }

  // Check password
  const isPasswordMatched = await user.comparePassword(password);

  if (!isPasswordMatched) {
    user.failedLoginAttempts += 1;

    // Lock account if attempts exceed 5
    if (user.failedLoginAttempts >= 5) {
      user.lockUntil = new Date(Date.now() + 24 * 60 * 60 * 1000); // for 24 hours 1 day lock ho hai
      await user.save();
      return res
        .status(403)
        .json({
          success: false,
          message: "Too many failed attempts. Account locked for 24 hours.",
        });
    }

    await user.save();
    return res
      .status(400)
      .json({ success: false, message: "Invalid credentials!" });
  }

  // Reset failed attempts on successful login
  user.failedLoginAttempts = 0;
  user.lockUntil = null;
  await user.save();

  const token = user.getJwtToken();

  res
    .status(200)
    .json({ success: true, message: "Login successful!", data: user, token });
};

const getUser = async (req, res) => {
  try {
    const user = await User.findById(req.user.id);
    if (!user) {
      return res.status(400).json({
        success: false,
        message: "User not found!",
      });
    }

    res.status(200).json({
      success: true,
      message: "User fetched!",
      user,
    });
  } catch (error) {
    console.error("Get User Error:", error);
    return res.status(500).json({
      success: false,
      message: "Internal Server Error!",
    });
  }
};

const updateUser = async (req, res) => {
  const { firstName, lastName, email } = req.body;

  try {
    // Fetch user by ID
    const user = await User.findById(req.user.id);
    if (!user) {
      return res.status(404).json({
        success: false,
        message: "User not found!",
      });
    }

    // Check if avatar file is uploaded
    if (!req.files || !req.files.avatar) {
      return res.status(400).json({
        success: false,
        message: "Avatar image not found",
      });
    }

    // Define avatar image details
    const { avatar } = req.files;
    const imageName = `${Date.now()}-${avatar.name}`;
    const directoryPath = path.join(__dirname, "../public/profile");

    // Ensure directory exists
    if (!fs.existsSync(directoryPath)) {
      fs.mkdirSync(directoryPath, { recursive: true });
    }

    // Define full image upload path
    const imageUploadPath = path.join(directoryPath, imageName);

    // Delete the old avatar if it exists
    if (user.avatar) {
      const oldImagePath = path.join(directoryPath, user.avatar);
      if (fs.existsSync(oldImagePath)) {
        fs.unlinkSync(oldImagePath);
      }
    }

    // Move the uploaded avatar to the designated path
    await avatar.mv(imageUploadPath);

    // Update user details
    user.firstName = firstName || user.firstName;
    user.lastName = lastName || user.lastName;
    user.email = email || user.email;
    user.avatar = imageName;

    // Save updated user
    await user.save();

    return res.status(200).json({
      success: true,
      message: "User updated successfully!",
      user,
    });
  } catch (error) {
    console.error("Update User Error:", error);
    return res.status(500).json({
      success: false,
      message: "Internal Server Error!",
    });
  }
};

const changePassword = async (req, res, next) => {
  const user = await User.findById(req.user.id).select("+password");
  if (!user) {
    return res.status(404).json({
      success: false,
      message: "User not found!",
    });
  }
  const { oldPassword, newPassword, confirmPassword } = req.body;
  if (!oldPassword || !newPassword || !confirmPassword) {
    return res.status(400).json({
      success: false,
      message: "All fields are required!",
    });
  }

  if (newPassword !== confirmPassword) {
    return res.status(400).json({
      success: false,
      message: "Password does not match!",
    });
  }

  const isMatch = await user.comparePassword(oldPassword);
  if (!isMatch) {
    return res.status(400).json({
      success: false,
      message: "Invalid old password!",
    });
  }

  user.password = newPassword;
  await user.save();
  return res.status(200).json({
    success: true,
    message: "password changed successFully!",
  });
};

//find All Users(By Admin)
const AllUsers = async (req, res) => {
  try {
    const users = await User.find();
    if (!users) {
      return res.status(404).json({
        success: false,
        message: "User not found",
      });
    }

    res.status(200).json({
      success: true,
      users,
    });
  } catch (error) {
    return res.status(500).json({
      success: false,
      message: "Internal Server Error!",
    });
  }
};

//findById
const singleUserByAdmin = async (req, res) => {
  try {
    const product = await User.findById(req.params.id);
    if (!product) {
      return res.status(404).json({
        success: false,
        message: "product not found!",
      });
    }

    res.status(200).json({
      success: true,
      message: "product get successFully!",
      product,
    });
  } catch (error) {
    return res.status(500).json({
      success: false,
      message: "Internal Server Error!",
    });
  }
};

// exporting
module.exports = {
  createUser,
  loginCredentials,
  verifyAccount,
  resendOTP,
  getUser,
  updateUser,
  changePassword,
  AllUsers,
  singleUserByAdmin,
};
